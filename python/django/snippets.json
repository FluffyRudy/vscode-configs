{
	"Django Custom Base Manager": {
		"prefix": "custom-manager",
		"body": [
			"from django.contrib.auth.base_user import BaseUserManager",
			"from django.utils.translation import gettext_lazy as _",
			"",
			"class CustomBaseManager(BaseUserManager):",
			"    def create_user(self, username, email, password, **extra_fields):",
			"        if not username:",
			"            raise ValueError(_('The username must be set'))",
			"        if not email:",
			"            raise ValueError(_('The email must be set'))",
			"        email = self.normalize_email(email=email)",
			"        user = self.model(username=username, email=email, **extra_fields)",
			"        user.set_password(password)",
			"        user.save()",
			"        return user",
			"",
			"    def create_superuser(self, email, password, **extra_fields):",
			"        extra_fields.setdefault(\"is_staff\", True)",
			"        extra_fields.setdefault(\"is_superuser\", True)",
			"        extra_fields.setdefault(\"is_active\", True)",
			"",
			"        if extra_fields.get(\"is_staff\") is not True:",
			"            raise ValueError(_('Superuser must have is_staff=True'))",
			"        if extra_fields.get(\"is_superuser\") is not True:",
			"            raise ValueError(_('Superuser must have is_superuser=True'))",
			"        return self.create_user(username, email, password, **extra_fields)"
		],
		"description": "Custom Base Manager for Django User Model"
	},
	"Django Custom User Model": {
		"prefix": "custom-user-model",
		"body": [
			"from django.db import models",
			"from django.contrib.auth.models import AbstractUser",
			"from django.utils.translation import gettext_lazy as _",
			"",
			"from .managers import CustomBaseManager",
			"",
			"class CustomUser(AbstractUser):",
			"    first_name = None",
			"    last_name = None",
			"    username = models.CharField(max_length=25, unique=False)",
			"    email = models.EmailField(_('email address'), unique=True)",
			"",
			"    USERNAME_FIELD = \"email\"",
			"    REQUIRED_FIELDS = [\"username\"]",
			"",
			"    objects = CustomBaseManager()",
			"",
			"    def __str__(self):",
			"        return self.email"
		],
		"description": "Custom User model for Django"
	},
	"Django Custom User Admin": {
		"prefix": "custom-user-admin",
		"body": [
			"from django.contrib import admin",
			"from django.contrib.auth.admin import UserAdmin",
			"",
			"from .models import CustomUser",
			"from .forms import CustomUserCreateForm, CustomUserChangeForm",
			"",
			"class CustomUserAdmin(UserAdmin):",
			"    add_form = CustomUserCreateForm",
			"    form = CustomUserChangeForm",
			"    model = CustomUser",
			"    list_display = (\"username\", \"email\", \"is_staff\", \"is_active\")",
			"    list_filter = (\"username\", \"email\", \"is_staff\", \"is_active\")",
			"    fieldsets = (",
			"        (\"Basic Information\", {\"fields\": (\"email\", \"password\")}),",
			"        (",
			"            \"Permissions\",",
			"            {\"fields\": (\"is_staff\", \"is_active\", \"groups\", \"user_permissions\")},",
			"        ),",
			"    )",
			"    add_fieldsets = (",
			"        (",
			"            None,",
			"            {",
			"                \"classes\": (\"wide\",),",
			"                \"fields\": (",
			"                    \"username\",",
			"                    \"email\",",
			"                    \"password1\",",
			"                    \"password2\",",
			"                    \"is_staff\",",
			"                    \"is_active\",",
			"                    \"groups\",",
			"                    \"user_permissions\",",
			"                ),",
			"            },",
			"        ),",
			"    )",
			"    search_fields = (\"email\",)",
			"    ordering = (\"email\",)",
			"",
			"admin.site.register(CustomUser, CustomUserAdmin)"
		],
		"description": "Custom User Admin for Django"
	},
	"Django Custom User Forms": {
		"prefix": "custom-user-forms",
		"body": [
			"from django.contrib.auth.forms import UserCreationForm, UserChangeForm",
			"",
			"from .models import CustomUser",
			"",
			"class CustomUserCreateForm(UserCreationForm):",
			"    class Meta:",
			"        model = CustomUser",
			"        fields = (\"email\",)",
			"",
			"class CustomUserChangeForm(UserChangeForm):",
			"    class Meta:",
			"        model = CustomUser",
			"        fields = (\"email\",)"
		],
		"description": "Custom User forms for Django"
	},
	"Django Settings": {
    "prefix": "django-settings",
    "body": [
      "from pathlib import Path",
      "from dotenv import load_dotenv",
      "from datetime import timedelta",
      "from os import getenv",
      "",
      "load_dotenv()",
      "",
      "BASE_DIR = Path(__file__).resolve().parent.parent",
      "",
      "SECRET_KEY = getenv(\"DJANGO_SECRET_KEY\")",
      "",
      "DEBUG = True",
      "",
      "ALLOWED_HOSTS = []",
      "if not DEBUG:",
      "    ALLOWED_HOSTS.append(\"*\")",
      "",
      "INSTALLED_APPS = [",
      "    \"django.contrib.admin\",",
      "    \"django.contrib.auth\",",
      "    \"django.contrib.contenttypes\",",
      "    \"django.contrib.sessions\",",
      "    \"django.contrib.messages\",",
      "    \"django.contrib.staticfiles\",",
      "    \"corsheaders\",",
      "    \"rest_framework\",",
      "    \"rest_framework_simplejwt\",",
      "]",
      "",
      "# AUTH_USER_MODEL = \"<AppName>.<UserClass>\"",
      "",
      "REST_FRAMEWORK = {",
      "    \"DEFAULT_AUTHENTICATION_CLASSES\": (",
      "        \"rest_framework_simplejwt.authentication.JWTAuthentication\",",
      "    ),",
      "    \"DEFAULT_PERMISSION_CLASSES\": (\"rest_framework.permissions.IsAuthenticated\",),",
      "    \"DEFAULT_PAGINATION_CLASS\": \"rest_framework.pagination.PageNumberPagination\",",
      "    \"PAGE_SIZE\": 5,",
      "}",
      "",
      "SIMPLE_JWT = {",
      "    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),",
      "    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),",
      "    \"ROTATE_REFRESH_TOKENS\": True,",
      "    \"BLACKLIST_AFTER_ROTATION\": True,",
      "    \"ALGORITHM\": \"HS256\",",
      "    \"SIGNING_KEY\": SECRET_KEY,",
      "    \"VERIFYING_KEY\": None,",
      "    \"AUTH_HEADER_TYPES\": (\"Bearer\",),",
      "    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),",
      "    \"TOKEN_USER_CLASS\": \"rest_framework_simplejwt.models.TokenUser\",",
      "    \"SLIDING_TOKEN_LIFETIME\": timedelta(minutes=5),",
      "    \"SLIDING_TOKEN_REFRESH_LIFETIME\": timedelta(days=1),",
      "}",
      "",
      "MIDDLEWARE = [",
      "    \"django.middleware.security.SecurityMiddleware\",",
      "    \"django.contrib.sessions.middleware.SessionMiddleware\",",
      "    \"django.middleware.common.CommonMiddleware\",",
      "    \"django.middleware.csrf.CsrfViewMiddleware\",",
      "    \"django.contrib.auth.middleware.AuthenticationMiddleware\",",
      "    \"django.contrib.messages.middleware.MessageMiddleware\",",
      "    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
      "    \"corsheaders.middleware.CorsMiddleware\",",
      "]",
      "",
      "ROOT_URLCONF = \"inventory_project.urls\"",
      "",
      "TEMPLATES = [",
      "    {",
      "        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",",
      "        \"DIRS\": [],",
      "        \"APP_DIRS\": True,",
      "        \"OPTIONS\": {",
      "            \"context_processors\": [",
      "                \"django.template.context_processors.debug\",",
      "                \"django.template.context_processors.request\",",
      "                \"django.contrib.auth.context_processors.auth\",",
      "                \"django.contrib.messages.context_processors.messages\",",
      "            ],",
      "        },",
      "    },",
      "]",
      "",
      "WSGI_APPLICATION = \"inventory_project.wsgi.application\"",
      "",
      "DATABASES = {",
      "    \"default\": {",
      "        \"ENGINE\": \"django.db.backends.postgresql\",",
      "        \"NAME\": getenv(\"PGDATABASE\"),",
      "        \"USER\": getenv(\"PGUSER\"),",
      "        \"PASSWORD\": getenv(\"PGPASSWORD\"),",
      "        \"HOST\": getenv(\"PGHOST\"),",
      "        \"PORT\": int(getenv(\"PGPORT\", 5432)),",
      "    }",
      "}",
      "",
      "AUTH_PASSWORD_VALIDATORS = [",
      "    {",
      "        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",",
      "    },",
      "    {",
      "        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",",
      "    },",
      "    {",
      "        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",",
      "    },",
      "    {",
      "        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",",
      "    },",
      "]",
      "",
      "LANGUAGE_CODE = \"en-us\"",
      "",
      "TIME_ZONE = \"UTC\"",
      "",
      "USE_I18N = True",
      "",
      "USE_TZ = True",
      "",
      "STATIC_URL = \"static/\"",
      "",
      "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
      "",
      "CORS_ALLOWED_ORIGINS = [\"http://localhost:5300\", \"http://127.0.0.1:5300\"]"
    ],
    "description": "Complete Django settings configuration"
  }
}