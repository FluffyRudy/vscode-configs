{
	"Django Custom Base Manager": {
		"prefix": "custom-manager",
		"body": [
			"from django.contrib.auth.base_user import BaseUserManager",
			"from django.utils.translation import gettext_lazy as _",
			"",
			"class CustomBaseManager(BaseUserManager):",
			"    def create_user(self, username, email, password, **extra_fields):",
			"        if not username:",
			"            raise ValueError(_('The username must be set'))",
			"        if not email:",
			"            raise ValueError(_('The email must be set'))",
			"        email = self.normalize_email(email=email)",
			"        user = self.model(username=username, email=email, **extra_fields)",
			"        user.set_password(password)",
			"        user.save()",
			"        return user",
			"",
			"    def create_superuser(self, email, password, **extra_fields):",
			"        extra_fields.setdefault(\"is_staff\", True)",
			"        extra_fields.setdefault(\"is_superuser\", True)",
			"        extra_fields.setdefault(\"is_active\", True)",
			"",
			"        if extra_fields.get(\"is_staff\") is not True:",
			"            raise ValueError(_('Superuser must have is_staff=True'))",
			"        if extra_fields.get(\"is_superuser\") is not True:",
			"            raise ValueError(_('Superuser must have is_superuser=True'))",
			"        return self.create_user(username, email, password, **extra_fields)"
		],
		"description": "Custom Base Manager for Django User Model"
	},
	"Django Custom User Model": {
		"prefix": "custom-user-model",
		"body": [
			"from django.db import models",
			"from django.contrib.auth.models import AbstractUser",
			"from django.utils.translation import gettext_lazy as _",
			"",
			"from .managers import CustomBaseManager",
			"",
			"class CustomUser(AbstractUser):",
			"    first_name = None",
			"    last_name = None",
			"    username = models.CharField(max_length=25, unique=False)",
			"    email = models.EmailField(_('email address'), unique=True)",
			"",
			"    USERNAME_FIELD = \"email\"",
			"    REQUIRED_FIELDS = [\"username\"]",
			"",
			"    objects = CustomBaseManager()",
			"",
			"    def __str__(self):",
			"        return self.email"
		],
		"description": "Custom User model for Django"
	},
	"Django Custom User Admin": {
		"prefix": "custom-user-admin",
		"body": [
			"from django.contrib import admin",
			"from django.contrib.auth.admin import UserAdmin",
			"",
			"from .models import CustomUser",
			"from .forms import CustomUserCreateForm, CustomUserChangeForm",
			"",
			"class CustomUserAdmin(UserAdmin):",
			"    add_form = CustomUserCreateForm",
			"    form = CustomUserChangeForm",
			"    model = CustomUser",
			"    list_display = (\"username\", \"email\", \"is_staff\", \"is_active\")",
			"    list_filter = (\"username\", \"email\", \"is_staff\", \"is_active\")",
			"    fieldsets = (",
			"        (\"Basic Information\", {\"fields\": (\"email\", \"password\")}),",
			"        (",
			"            \"Permissions\",",
			"            {\"fields\": (\"is_staff\", \"is_active\", \"groups\", \"user_permissions\")},",
			"        ),",
			"    )",
			"    add_fieldsets = (",
			"        (",
			"            None,",
			"            {",
			"                \"classes\": (\"wide\",),",
			"                \"fields\": (",
			"                    \"username\",",
			"                    \"email\",",
			"                    \"password1\",",
			"                    \"password2\",",
			"                    \"is_staff\",",
			"                    \"is_active\",",
			"                    \"groups\",",
			"                    \"user_permissions\",",
			"                ),",
			"            },",
			"        ),",
			"    )",
			"    search_fields = (\"email\",)",
			"    ordering = (\"email\",)",
			"",
			"admin.site.register(CustomUser, CustomUserAdmin)"
		],
		"description": "Custom User Admin for Django"
	},
	"Django Custom User Forms": {
		"prefix": "custom-user-forms",
		"body": [
			"from django.contrib.auth.forms import UserCreationForm, UserChangeForm",
			"",
			"from .models import CustomUser",
			"",
			"class CustomUserCreateForm(UserCreationForm):",
			"    class Meta:",
			"        model = CustomUser",
			"        fields = (\"email\",)",
			"",
			"class CustomUserChangeForm(UserChangeForm):",
			"    class Meta:",
			"        model = CustomUser",
			"        fields = (\"email\",)"
		],
		"description": "Custom User forms for Django"
	}
}